#!/usr/bin/env bash
set -euo pipefail

# Toujours exécuter depuis la racine du repo
SCRIPT_DIR="$(cd "$(dirname "${BASH_SOURCE[0]}")" && pwd)"
REPO_ROOT="$(cd "$SCRIPT_DIR/.." && pwd)"
cd "$REPO_ROOT"

# --- Helpers -----------------------------------------------------------------
kill_port() {
  local port="$1"
  local pids=""
  echo "→ Vérification du port $port..."

  if command -v lsof >/dev/null 2>&1; then
    pids="$(lsof -t -iTCP:${port} -sTCP:LISTEN 2>/dev/null || true)"
  fi

  if [[ -z "${pids}" ]] && command -v fuser >/dev/null 2>&1; then
    # shellcheck disable=SC2046
    pids="$(fuser -n tcp ${port} 2>/dev/null | tr -s ' ' '\n' || true)"
  fi

  if [[ -n "${pids}" ]]; then
    echo "  Port ${port} occupé par PID(s) : ${pids}"
    kill -TERM ${pids} 2>/dev/null || true
    sleep 1
    for pid in ${pids}; do
      if kill -0 "${pid}" 2>/dev/null; then
        echo "  PID ${pid} toujours actif — envoi SIGKILL..."
        kill -KILL "${pid}" 2>/dev/null || true
      fi
    done
    echo "  Port ${port} libéré."
  else
    echo "  Aucun processus en écoute sur le port ${port}."
  fi
  return 0
}

stop_servers() {
  echo
  echo "Arrêt des serveurs de dev (ports 4200 et 3000)"
  echo "----------------------------------------------"

  kill_port 4200 || true
  kill_port 3000 || true

  echo "→ Filet de sécurité (pkill sur patterns connus)..."
  pkill -f "ng serve" 2>/dev/null || true
  pkill -f "vite dev" 2>/dev/null || true
  pkill -f "nest start" 2>/dev/null || true
  pkill -f "node.*webpack-dev-server" 2>/dev/null || true

  echo "Arrêt terminé."
  echo
  read -rp "Appuie sur Entrée pour revenir au menu..." _
}

# -----------------------------------------------------------------------------

clear
echo "Monorepo CLI"
echo "============"
echo

TMPDIR="$(mktemp -d -t monorepo-lint-XXXX)"
trap 'rm -rf "$TMPDIR"' EXIT

while true; do
  echo "Sélection du projet:"
  PS3="Projet \\#> "
  target=""
  select opt in "front" "api" "lint" "tests" "stop servers" "Quitter"; do
    case "$opt" in
      "front") target="front"; break ;;
      "api") target="api"; break ;;
      "lint") target="lint"; break ;;
      "tests") target="tests"; break ;;
      "stop servers")
        stop_servers
        continue 2
        ;;
      "Quitter") exit 0 ;;
      *) echo "Choix invalide." ;;
    esac
  done

  while true; do
    echo
    echo "Actions pour '$target':"
    PS3="Action \\#> "

    if [[ "$target" == "lint" ]]; then
      select action in "lint & fix" "Retour" "Quitter"; do
        case "$action" in
          "lint & fix")
            echo
            echo "Exécution du lint + fix sur les workspaces 'api' et 'front'..."
            echo "------------------------------------------------------------"

            api_log="$TMPDIR/api-lint.log"
            front_log="$TMPDIR/front-lint.log"

            echo
            echo "=> api: npm run lint --workspace=api -- --fix (logs: $api_log)"
            if ! npm run lint --workspace=api -- --fix >"$api_log" 2>&1; then
              echo "Lint api échoué — voir $api_log"
            else
              echo "Lint api OK — voir $api_log"
            fi

            echo
            echo "----- Erreurs / Warnings (api) -----"
            if grep -i -E 'error|warning' "$api_log" >/dev/null 2>&1; then
              grep -n -i -E 'error|warning' "$api_log" || true
            else
              echo "(Aucun 'error' ou 'warning' trouvé dans le log de api.)"
            fi
            echo "-------------------------------------"

            echo
            echo "=> front: npm run lint --workspace=front -- --fix (logs: $front_log)"
            if ! npm run lint --workspace=front -- --fix >"$front_log" 2>&1; then
              echo "Lint front échoué — voir $front_log"
            else
              echo "Lint front OK — voir $front_log"
            fi

            echo
            echo "----- Erreurs / Warnings (front) -----"
            if grep -i -E 'error|warning' "$front_log" >/dev/null 2>&1; then
              grep -n -i -E 'error|warning' "$front_log" || true
            else
              echo "(Aucun 'error' ou 'warning' trouvé dans le log de front.)"
            fi
            echo "---------------------------------------"

            echo
            echo "Lint & fix terminé pour api + front. Appuie sur Entrée pour retourner au menu..."
            read -r
            break
            ;;
          "Retour") break 2 ;;
          "Quitter") exit 0 ;;
          *) echo "Choix invalide." ;;
        esac
      done

    elif [[ "$target" == "tests" ]]; then
      select action in "run (api RIB → front)" "api only (RIB)" "front only" "Retour" "Quitter"; do
        case "$action" in
          "run (api RIB → front)")
            echo
            echo "Lancement des tests API (runInBand) puis FRONT..."
            echo "-----------------------------------------------"
            npm run test:all
            echo
            read -rp "Appuie sur Entrée pour retourner au menu..." _
            break
            ;;
          "api only (RIB)")
            npm run test:api:rib || true
            echo
            read -rp "Appuie sur Entrée pour retourner..." _
            ;;
          "front only")
            npm run test:front:ci || true
            echo
            read -rp "Appuie sur Entrée pour retourner..." _
            ;;
          "Retour") break 2 ;;
          "Quitter") exit 0 ;;
          *) echo "Choix invalide." ;;
        esac
      done

    else
      # Sous-menus spécifiques par cible
      if [[ "$target" == "front" ]]; then
        select action in "up" "OpenAPI generation (models only)" "Retour" "Quitter"; do
          case "$action" in
            "up")
              echo
              echo "Démarrage du serveur 'front'..."
              echo "-------------------------------"
              npm run start --workspace=front
              echo
              echo "Processus terminé pour 'front'."
              ;;
            "OpenAPI generation (models only)")
              echo
              echo "Génération des modèles OpenAPI pour le front (openapi-typescript-codegen)..."
              echo "----------------------------------------------------------------------------"
              # Nécessite que l'API expose /docs-json (en dev)
              if ! npm run gen:api-models --workspace=front; then
                echo
                echo "❌ Échec de la génération."
                echo "   Vérifie que l'API tourne et expose /docs-json (ex: npm run start:api:dev)."
              else
                echo "✅ Modèles générés : front/src/app/api/models/* (et index.ts)"
              fi
              echo
              read -rp "Appuie sur Entrée pour revenir..." _
              ;;
            "Retour") break 2 ;;
            "Quitter") exit 0 ;;
            *) echo "Choix invalide." ;;
          esac
        done
      else
        # Sous-menu 'api'
         select action in "up" "migrations: generate" "migrations: run" "migrations: revert" "Retour" "Quitter"; do
                  case "$action" in
                    "up")
                      echo
                      echo "Démarrage du serveur 'api'..."
                      echo "-----------------------------"
                      npm run start --workspace=api
                      echo
                      echo "Processus terminé pour 'api'."
                      ;;

                    "migrations: generate")
                      echo
                      echo "Génération d'une migration TypeORM (db:gen)..."
                      echo "---------------------------------------------"
                      echo "=> npm run db:gen --workspace=api"
                      if ! npm run db:gen --workspace=api; then
                        echo "❌ Échec de la génération de migration."
                      else
                        echo "✅ Migration générée dans src/db/migrations."
                      fi
                      echo
                      read -rp "Appuie sur Entrée pour revenir..." _
                      ;;

                    "migrations: run")
                      echo
                      echo "Compilation de l'API (pré-requis pour db:run sur dist/)..."
                      echo "---------------------------------------------------------"
                      npm run build --workspace=api || { echo "❌ Build échoué, annulation."; read -rp "Entrée pour revenir..." _; continue; }

                      echo
                      echo "Exécution des migrations (db:run)..."
                      echo "-----------------------------------"
                      echo "=> npm run db:run --workspace=api"
                      if ! npm run db:run --workspace=api; then
                        echo "❌ Échec de l'exécution des migrations."
                      else
                        echo "✅ Migrations appliquées."
                      fi
                      echo
                      read -rp "Appuie sur Entrée pour revenir..." _
                      ;;

                    "migrations: revert")
                      echo
                      echo "Compilation de l'API (pré-requis pour db:revert sur dist/)..."
                      echo "-------------------------------------------------------------"
                      npm run build --workspace=api || { echo "❌ Build échoué, annulation."; read -rp "Entrée pour revenir..." _; continue; }

                      echo
                      echo "Revert de la dernière migration (db:revert)..."
                      echo "----------------------------------------------"
                      echo "=> npm run db:revert --workspace=api"
                      if ! npm run db:revert --workspace=api; then
                        echo "❌ Échec du revert de migration."
                      else
                        echo "✅ Dernière migration annulée."
                      fi
                      echo
                      read -rp "Appuie sur Entrée pour revenir..." _
                      ;;

                    "Retour") break 2 ;;
                    "Quitter") exit 0 ;;
                    *) echo "Choix invalide." ;;
                  esac
                done
              fi
    fi
  done
done
