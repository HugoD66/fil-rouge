#!/usr/bin/env bash
set -euo pipefail

# Toujours exécuter depuis la racine du repo
SCRIPT_DIR="$(cd "$(dirname "${BASH_SOURCE[0]}")" && pwd)"
REPO_ROOT="$(cd "$SCRIPT_DIR/.." && pwd)"
cd "$REPO_ROOT"

# --- Helpers -----------------------------------------------------------------
kill_port() {
  local port="$1"
  local pids=""
  echo "→ Vérification du port $port..."

  if command -v lsof >/dev/null 2>&1; then
    # Processus à l'écoute (LISTEN) sur port TCP donné
    pids="$(lsof -t -iTCP:${port} -sTCP:LISTEN 2>/dev/null || true)"
  fi

  if [[ -z "${pids}" ]] && command -v fuser >/dev/null 2>&1; then
    # fuser retourne les PIDs sur ce port
    # shellcheck disable=SC2046
    pids="$(fuser -n tcp ${port} 2>/dev/null | tr -s ' ' '\n' || true)"
  fi

  if [[ -n "${pids}" ]]; then
    echo "  Port ${port} occupé par PID(s) : ${pids}"
    # Tentative d'arrêt propre
    kill -TERM ${pids} 2>/dev/null || true
    sleep 1
    # Si ça tourne encore, on force
    for pid in ${pids}; do
      if kill -0 "${pid}" 2>/dev/null; then
        echo "  PID ${pid} toujours actif — envoi SIGKILL..."
        kill -KILL "${pid}" 2>/dev/null || true
      fi
    done
    echo "  Port ${port} libéré."
    return 0
  else
    echo "  Aucun processus en écoute sur le port ${port}."
    return 0
  fi
}

stop_servers() {
  echo
  echo "Arrêt des serveurs de dev (ports 4200 et 3000)"
  echo "----------------------------------------------"
  local ok=0

  kill_port 4200 || ok=1
  kill_port 3000 || ok=1

  # Filets de sécurité : si aucun PID trouvé mais un process reste collé,
  # on tente des pkill sur des patterns de dev courants.
  echo "→ Filet de sécurité (pkill sur patterns connus)..."
  pkill -f "ng serve" 2>/dev/null || true
  pkill -f "vite dev" 2>/dev/null || true
  pkill -f "nest start" 2>/dev/null || true
  pkill -f "node.*webpack-dev-server" 2>/dev/null || true

  echo "Arrêt terminé."
  echo
  read -rp "Appuie sur Entrée pour revenir au menu..." _
}

# -----------------------------------------------------------------------------

# Astuces d'affichage
clear
echo "Monorepo CLI"
echo "============"
echo

TMPDIR="$(mktemp -d -t monorepo-lint-XXXX)"
trap 'rm -rf "$TMPDIR"' EXIT

while true; do
  echo "Sélection du projet:"
  PS3="Projet \\#> "
  target=""
  select opt in "front" "api" "lint" "stop servers" "Quitter"; do
    case "$opt" in
      "front") target="front"; break ;;
      "api") target="api"; break ;;
      "lint") target="lint"; break ;;
      "stop servers")
        stop_servers
        # On revient au menu projet après l'arrêt
        continue 2
        ;;
      "Quitter") exit 0 ;;
      *) echo "Choix invalide." ;;
    esac
  done

  while true; do
    echo
    echo "Actions pour '$target':"
    PS3="Action \\#> "

    if [[ "$target" == "lint" ]]; then
      select action in "lint & fix (api + front)" "Retour" "Quitter"; do
        case "$action" in
          "lint & fix (api + front)")
            echo
            echo "Exécution du lint + fix sur les workspaces 'api' et 'front'..."
            echo "------------------------------------------------------------"

            api_status=0
            front_status=0

            api_log="$TMPDIR/api-lint.log"
            front_log="$TMPDIR/front-lint.log"

            echo
            echo "=> api: npm run lint --workspace=api -- --fix (logs: $api_log)"
            if ! npm run lint --workspace=api -- --fix >"$api_log" 2>&1; then
              api_status=$?
              echo "Lint api échoué (status $api_status) — voir $api_log"
            else
              echo "Lint api OK — voir $api_log"
            fi

            echo
            echo "----- Erreurs / Warnings (api) -----"
            if grep -i -E 'error|warning' "$api_log" >/dev/null 2>&1; then
              grep -n -i -E 'error|warning' "$api_log" || true
            else
              echo "(Aucun 'error' ou 'warning' trouvé dans le log de api.)"
            fi
            echo "-------------------------------------"

            echo
            echo "=> front: npm run lint --workspace=front -- --fix (logs: $front_log)"
            if ! npm run lint --workspace=front -- --fix >"$front_log" 2>&1; then
              front_status=$?
              echo "Lint front échoué (status $front_status) — voir $front_log"
            else
              echo "Lint front OK — voir $front_log"
            fi

            echo
            echo "----- Erreurs / Warnings (front) -----"
            if grep -i -E 'error|warning' "$front_log" >/dev/null 2>&1; then
              grep -n -i -E 'error|warning' "$front_log" || true
            else
              echo "(Aucun 'error' ou 'warning' trouvé dans le log de front.)"
            fi
            echo "---------------------------------------"

            if [ "$api_status" -ne 0 ] || [ "$front_status" -ne 0 ]; then
              echo
              echo "Résumé des statuts : api=$api_status front=$front_status"
              echo "Les logs complets se trouvent dans :"
              echo "  $api_log"
              echo "  $front_log"
              echo
              echo "Appuie sur Entrée pour retourner au menu..."
              read -r
              break
            fi

            echo
            echo "Lint & fix terminé pour api + front. Appuie sur Entrée pour retourner au menu..."
            read -r
            break
            ;;
          "Retour") break 2 ;;
          "Quitter") exit 0 ;;
          *) echo "Choix invalide." ;;
        esac
      done
    else
      select action in "up (lancer le serveur)" "Retour" "Quitter"; do
        case "$action" in
          "up (lancer le serveur)")
            echo
            echo "Démarrage du serveur '$target'..."
            echo "---------------------------------"
            npm run start --workspace="$target"
            echo
            echo "Processus terminé pour '$target'."
            ;;
          "Retour") break 2 ;;
          "Quitter") exit 0 ;;
          *) echo "Choix invalide." ;;
        esac
      done
    fi
  done
done
